define(["require","exports","knockout","ojs/ojarraydataprovider","ojs/ojmutablearraydataprovider","../common/dataAccessService","../common/localizedConstants","../common/scriptExecutionModels","../utilities","ojs/ojmodule-element-utils","../common/messageService","../common/models","ojs/ojknockout","ojs/ojnavigationlist","ojs/ojmodule-element","ojs/ojmessage","ojs/ojmessages","ojs/ojselectcombobox","ojs/ojlabel","ojs/ojinputtext"],(function(require,e,n,s,t,a,i,o,c,r,l,d){"use strict";let h;class g{constructor(){this.configureAIProfilesTitle=i.LocalizedConstants.Instance.configureAIProfiles,this.manageProfile=i.LocalizedConstants.Instance.manageProfile,this.manageCredentials=i.LocalizedConstants.Instance.dbmsCloudAIManageCredentials,this.connectionName=i.LocalizedConstants.Instance.filterUILabelConnectionName,this.username=i.LocalizedConstants.Instance.userName,this.fullDesc=i.LocalizedConstants.Instance.configProfileDescription,this.noConnections=i.LocalizedConstants.Instance.configAIConnectionsUnavailable,this.userUnavailable=i.LocalizedConstants.Instance.currentUserUnavailable}}return class{constructor(){this.msgPos={my:{vertical:"top",horizontal:"end"},at:{vertical:"top",horizontal:"end"},of:"window"},this.messageHandlersField=new Map,this.labelTexts=new g,this.allConnectionNames=n.observableArray([]),this.connectionNamesDP=new t(this.allConnectionNames(),{keyAttributes:"value"}),this.connectionNameValue=n.observable(""),this.bNoConnections=!1,this.onConnectionNameChanged=e=>{this.isValueEmpty(this.connectionNameValue())||this.bNoConnections?(this.connectionId=-1,this.connectionNameLabel=""):(this.updateConnectionId(),this.connectedUser(""),this.updateModuleConfig(),this.getConnectedUser())},this.connectionId=-1,this.connectionNameLabel="",this.connectedUser=n.observable("").extend({notify:"always"}),this.bUserUnavailable=!1,this.isGettingUser=n.observable(!1).extend({notify:"always"}),this.profilesTab="manageAIProfilesModule",this.credentialsTab="manageCredentialsModule",this.tabData=[{name:this.labelTexts.manageCredentials,id:this.credentialsTab},{name:this.labelTexts.manageProfile,id:this.profilesTab}],this.tabDataProvider=new s(this.tabData,{keyAttributes:"id"}),this.onTabChanged=e=>{this.updateModuleConfig()},this.selectedTab=n.observable().extend({notify:"always"}),this.moduleCache=new Map,this.moduleConfig=n.observable({view:[],viewModel:null,cleanupMode:"none"}),this.onThemeChanged=e=>{a.DataAccessService.instance.logInfo("Theme Changed"),c.setContrast()},this.onClearPageEvent=e=>{try{a.DataAccessService.instance.logInfo("OnclearPageEvent:"+JSON.stringify(e));const n=e.data;this.handleClearEvent(n)}catch(e){a.DataAccessService.instance.logError(e),l.MessagesService.getinstance().ShowMessage(i.LocalizedConstants.Instance.unableToClear)}},this.handleClearEvent=e=>{try{a.DataAccessService.instance.URI=e.uri,a.DataAccessService.instance.currentExecutionId=e.executionId,a.DataAccessService.instance.windowUri=e.windowUri,a.DataAccessService.instance.profileName=e.profileName,a.DataAccessService.instance.configurationTarget=e.configurationTarget,a.DataAccessService.instance.workspaceFolderName=e.workspaceFolderName,a.DataAccessService.instance.workspaceFolderUri=e.workspaceFolderUri,a.DataAccessService.instance.workspaceFolderIndex=e.workspaceFolderIndex,a.DataAccessService.instance.connectionUniqueId=e.connectionUniqueId,this.initialize()}catch(e){a.DataAccessService.instance.logError(e),l.MessagesService.getinstance().ShowMessage(i.LocalizedConstants.Instance.unableToClear)}},h=this,h.messageHandlers=new Map,h.messageHandlers.set(o.MessageName.themeChanged,h.onThemeChanged),h.messageHandlers.set(o.MessageName.odtConfigChanged,h.onConfigChanged),this.messageHandlers.set(o.MessageName.clearPageEvent,h.onClearPageEvent),this.messageHandlers.set(o.MessageName.configAIGetConnectionsInfoResponse,(e=>{this.handleGetConnectionDataResponse(e)})),this.messageHandlers.set(o.MessageName.getConnectedUserResponse,(e=>{e&&c.selectAIResponseIsSameConnection(e,this.connectionId)&&this.handleGetConnectedUserResponse(e)})),a.DataAccessService.instance.subscribe((e=>{if(e&&this.messageHandlers.get(e.type)){const n=this.messageHandlers.get(e.type);n&&n(e)}else a.DataAccessService.instance.logError(`Could not find handler for message ${e.type}`)})),a.DataAccessService.instance.logInfo("Fetching Localized resources "),a.DataAccessService.instance.getLocalizedData().done((e=>{a.DataAccessService.instance.logInfo("Fetched localized resources."),i.LocalizedConstants.Instance.Configure(e)})).fail((e=>{a.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))})),this.initialize(),c.setContrast()}get messagesDataProvider(){return l.MessagesService.getinstance().messagesDataproviderField}get messageHandlers(){return this.messageHandlersField}set messageHandlers(e){this.messageHandlersField=e}initialize(){a.DataAccessService.instance.logInfo("Start initializing configProfileModule"),l.MessagesService.getinstance().ClearAll(),this.connectedUser(""),this.getConnectionData(),this.selectedTab(this.credentialsTab),this.updateModuleConfig(),a.DataAccessService.instance.logInfo("End initializing configProfileModule")}async updateModuleConfig(){let e=this.selectedTab(),n=this.connectedUser();this.bUserUnavailable&&(n="");try{let s;this.moduleCache.has(e)?(s=this.moduleCache.get(e),(e===this.credentialsTab||e===this.profilesTab)&&s.viewModel?.initialize(n,this.connectionId,this.connectionNameValue(),this.connectionNameLabel)):s=await r.createConfig({name:e,params:{moduleName:e,connectionId:this.connectionId,connectionUniqueName:this.connectionNameValue(),connectionName:this.connectionNameLabel,connectedUser:n}}),this.moduleCache.set(e,{view:s.view,viewModel:s.viewModel,cleanupMode:"none"})}catch(e){a.DataAccessService.instance.logError(e)}this.moduleConfig(this.moduleCache.get(e))}getConnectionData(){this.bNoConnections=!1,this.allConnectionNames.removeAll(),this.connectionNameValue(""),this.connectionId=-1,this.connectionNameLabel="";const e=new o.MessageBase;e.type=o.MessageName.configAIGetConnectionsInfoRequest;const n=new o.ConfigAIGetConnectionsInfoRequest;n.ownerUri=a.DataAccessService.instance.URI,n.executionId=a.DataAccessService.instance.currentExecutionId,n.windowUri=a.DataAccessService.instance.windowUri,e.data=n;try{a.DataAccessService.instance.send(e),a.DataAccessService.instance.logInfo("Successfully placed ConfigAIGetConnectionsInfoRequest")}catch(e){a.DataAccessService.instance.logError(e)}}handleGetConnectionDataResponse(e){a.DataAccessService.instance.logInfo("Received ConfigAIGetConnectionsInfoResponse");try{const n=e.data;n&&(n.profilesInfo&&n.profilesInfo.length>0?n.profilesInfo.forEach((([e,n,s])=>{this.allConnectionNames.push({value:n,label:e,uniqueId:s}),s==a.DataAccessService.instance.connectionUniqueId&&(this.connectionNameValue(n),this.connectionId=s,this.connectionNameLabel=e)})):(this.bNoConnections=!0,this.allConnectionNames([{value:this.labelTexts.noConnections,label:this.labelTexts.noConnections,uniqueId:-1}]),this.connectionNameValue(this.labelTexts.noConnections)),this.connectionNamesDP.data=this.allConnectionNames())}catch(e){a.DataAccessService.instance.logError(e)}}getConnectedUser(){a.DataAccessService.instance.logInfo("Getting connected user"),this.connectedUser(""),this.bUserUnavailable=!1,this.isGettingUser(!0);const e=new o.MessageBase;e.type=o.MessageName.getConnectedUserRequest;const n=new o.GetConnectedUserRequest;n.ownerUri=a.DataAccessService.instance.URI,n.executionId=a.DataAccessService.instance.currentExecutionId,n.windowUri=a.DataAccessService.instance.windowUri,n.connectionUniqueId=this.connectionId,n.connectionUniqueName=this.connectionNameValue(),n.connectionName=this.connectionNameLabel,e.data=n;try{a.DataAccessService.instance.send(e),a.DataAccessService.instance.logInfo("Successfully placed getConnectedUserRequest - "+o.GetConnectedUserRequest.displayString(n))}catch(e){a.DataAccessService.instance.logError(e)}}handleGetConnectedUserResponse(e){a.DataAccessService.instance.logInfo("Received getConnectedUserResponse");try{const n=e.data;n&&(a.DataAccessService.instance.logInfo("Handling getConnectedUserResponse - "+o.GetConnectedUserResponse.displayString(n)),l.MessagesService.getinstance().ClearAll(),this.isValueEmpty(n.errorMessage)&&!this.isValueEmpty(n.connectedUser)?this.connectedUser(n.connectedUser):(l.MessagesService.getinstance().ShowMessage(n.errorMessage,d.Severity.error),this.bUserUnavailable=!0,this.connectedUser(this.labelTexts.userUnavailable)))}catch(e){a.DataAccessService.instance.logError(e)}this.isGettingUser(!1),this.updateModuleConfig()}updateConnectionId(){this.allConnectionNames().forEach((e=>{e.value===this.connectionNameValue()&&(this.connectionId=e.uniqueId,this.connectionNameLabel=e.label)}))}isValueEmpty(e){return null==e||null==e||""==e}onConfigChanged(e){const n=e.data;a.DataAccessService.instance.updatedConfig(n)}}}));