define(["require","exports","knockout","../common/scriptExecutionModels","../common/dataAccessService","../common/localizedConstants","../common/tooltip","../common/models","ojs/ojbutton","ojs/ojknockout","ojs/ojoption","ojs/ojbutton","ojs/ojmenu"],(function(require,e,t,o,i,s,r,n){"use strict";return class{constructor(e){this.settingsBarId="settingsBar",this.settingsButtonStyleSelected="settings-button-selected",this.settingsButtonStyleDefault="settings-button-default",this.settingsButtonStyleDisabled="settings-button-disabled",this.userScopeBtnLabel=t.observable("User"),this.workspaceScopeBtnLabel=t.observable("Workspace"),this.folderScopeBtnLabel=t.observable("Folder"),this.messageHandlers=new Map,this.configTgts=[],this.configurationTargets=t.observableArray(),this.configurationTarget=t.observable(""),this.userScopeBtnStyle=t.observable(""),this.workspaceScopeBtnStyle=t.observable(""),this.folderScopeBtnStyle=t.observable(""),this.userScopeAvailable=t.observable(!1),this.workspaceScopeAvailable=t.observable(!1),this.folderScopeAvailable=t.observable(!1),this.userScopeEnabled=t.observable(!0),this.workspaceScopeEnabled=t.observable(!0),this.workspaceFolderScopeEnabled=t.observable(!0),this.onUserScopeBtnClick=(e,t,s)=>{try{if(this.editable()&&this.profileConfigurationTarget()!==o.ConfigurationTarget.Global){let e=new n.configSaveConfirmData(o.ConfigurationTarget.Global,void 0,!1);this.infoSignalFromConfig.dispatch(n.configSignalType.SaveConfirm,e)}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.onUserScopeBtnClick handler"),i.DataAccessService.instance.logError(e)}},this.onWorkspaceScopeBtnClick=(e,t,s)=>{try{if(this.editable()&&this.profileConfigurationTarget()!==o.ConfigurationTarget.Workspace){let e=new n.configSaveConfirmData(o.ConfigurationTarget.Workspace,void 0,!1);this.infoSignalFromConfig.dispatch(n.configSignalType.SaveConfirm,e)}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.onWorkspaceScopeBtnClick handler"),i.DataAccessService.instance.logError(e)}},this.onFolderScopeBtnClick=(e,t,s)=>{try{if(this.editable()){if(this.selectedWorkspaceFolder&&(this.profileConfigurationTarget()!==o.ConfigurationTarget.WorkspaceFolder||!this.profileWorkspaceFolder()||this.profileWorkspaceFolder().name!==this.selectedWorkspaceFolder.name||this.profileWorkspaceFolder().index!==this.selectedWorkspaceFolder.index)){let e=new n.configSaveConfirmData(o.ConfigurationTarget.WorkspaceFolder,this.selectedWorkspaceFolder,!1);return void this.infoSignalFromConfig.dispatch(n.configSignalType.SaveConfirm,e)}this.configurationTargets.removeAll(),this.configTgts&&this.configTgts.length>0&&this.configTgts.forEach((e=>{this.configurationTargets.push({value:e.value,label:e.label})}));let t=document.getElementById(this.folderScopeMenuId);if(!t&&this.folderMenu){let e=document.getElementById(this.settingsBarId);e&&(e.appendChild(this.folderMenu),t=document.getElementById(this.folderScopeMenuId))}if(t){this.folderMenu=t;t&&t.open(e)}}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.onFolderScopeBtnClick handler"),i.DataAccessService.instance.logError(e)}},this.onFolderScopeSelect=e=>{try{let t=e.detail.selectedValue;if(t){let e=t;if(this.configurationScopes){let t=this.configurationScopes.find((t=>this.getConfigValue(t.configurationTarget,t.workspaceFolder)===e));if(t&&t.workspaceFolder&&(this.profileConfigurationTarget()!==o.ConfigurationTarget.WorkspaceFolder||!this.profileWorkspaceFolder()||this.profileWorkspaceFolder().name!==t.workspaceFolder.name||this.profileWorkspaceFolder().index!==t.workspaceFolder.index)){let e=new n.configSaveConfirmData(o.ConfigurationTarget.WorkspaceFolder,t.workspaceFolder,!1);this.infoSignalFromConfig.dispatch(n.configSignalType.SaveConfirm,e)}}}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.onFolderScopeSelect handler"),i.DataAccessService.instance.logError(e)}};try{if(this.sourcePrefix=e.fieldIdPrefix,this.tooltip=new r("tooltipPopup"),this.userScopeBtnId=e.fieldIdPrefix+"userScopeBtn",this.workspaceScopeBtnId=e.fieldIdPrefix+"workspaceScopeBtn",this.folderScopeBtnId=e.fieldIdPrefix+"folderScopeBtn",this.folderScopeMenuId=e.fieldIdPrefix+"folderScopeMenu",this.folderScopeMenuOptionId=e.fieldIdPrefix+"folderScopeMenuOption",this.infoSignalToConfig=e.infoSignalToConfig,this.infoSignalFromConfig=e.infoSignalFromConfig,this.profileConfigurationTarget=e.profileConfigTarget,this.profileWorkspaceFolder=e.profileWorkspaceFolder,this.selectedWorkspaceFolder=e.profileWorkspaceFolder(),this.editable=e.editable,!this.editable()){this.settingsButtonStyleDefault=this.settingsButtonStyleDisabled;let e=this.getConfigValue(o.ConfigurationTarget.Global,void 0);this.configurationTarget(e),this.userScopeBtnStyle(this.settingsButtonStyleSelected),this.workspaceScopeBtnStyle(this.settingsButtonStyleDefault),this.folderScopeBtnStyle(this.settingsButtonStyleDefault)}i.DataAccessService.instance.subscribe((e=>{if(e&&this.messageHandlers.get(e.type)){const t=this.messageHandlers.get(e.type);t&&t(e)}else i.DataAccessService.instance.logError(`Could not find handler for message ${e.type}`)})),this.infoSignalToConfig.removeAll(),this.infoSignalToConfig.add(((e,t)=>{this.handleInfoSignalToConfig(e,t)}),this),t.computed((()=>{try{this.updateUiFromProfile(this.profileConfigurationTarget(),this.profileWorkspaceFolder(),this.folderScopeAvailable(),this.editable())}catch(e){i.DataAccessService.instance.logError("Error on updating configSettings.UI from profile"),i.DataAccessService.instance.logError(e)}}),this),this.getAllProfileNames(),this.messageHandlers.set(o.MessageName.confirmChangeScopeResponse+this.sourcePrefix,(e=>{this.handleConfirmChangeScopeResponse(e)}))}catch(e){i.DataAccessService.instance.logError("Error in configSettings constructor"),i.DataAccessService.instance.logError(e)}}resetSettingsTarget(){try{this.userScopeBtnStyle(""),this.workspaceScopeBtnStyle(""),this.folderScopeBtnStyle(""),this.existingUserProfiles=[],this.existingWorkspaceProfiles=[],this.existingFolderProfiles=[],this.configurationScopes=[],this.configurationTarget(""),this.configurationTargets.removeAll(),this.configTgts=[]}catch(e){i.DataAccessService.instance.logError("Error in configSettings.resetSettingsTarget"),i.DataAccessService.instance.logError(e)}}getConfigValue(e,t){let s;try{if(s=`${e}`,e===o.ConfigurationTarget.WorkspaceFolder){s=`${s}_${`${t.name}_${t.index}`}`}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.getConfigValue"),i.DataAccessService.instance.logError(e)}return s}getAllProfileNames(){try{this.messageHandlers.set(o.MessageName.getAllProfileNamesResponse,(e=>{this.handleGetAllProfileNamesResponse(e)}));const e=new o.MessageBase;e.type=o.MessageName.getAllProfileNamesRequest;const t=new o.GetAllProfileNamesRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri,e.data=t,i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed get tns locationsrequest ")}catch(e){i.DataAccessService.instance.logError("Error in configSettings.getAllProfileNames handler"),i.DataAccessService.instance.logError(e)}}handleGetAllProfileNamesResponse(e){i.DataAccessService.instance.logInfo("configSettings.handleGetAllProfileNamesResponse - Start");try{i.DataAccessService.instance.logInfo("Received GetAllProfileNamesResponse"),this.messageHandlers.delete(o.MessageName.getAllProfileNamesResponse);const t=e.data;if(t){this.existingUserProfiles=t.userProfiles,this.existingWorkspaceProfiles=t.workspaceProfiles,this.existingFolderProfiles=t.folderProfiles,this.configurationScopes=t.configurationScopes,t.configurationScopes.forEach((e=>{let t=this.getConfigValue(e.configurationTarget,e.workspaceFolder);switch(e.configurationTarget){case o.ConfigurationTarget.Global:this.userScopeAvailable(!0);break;case o.ConfigurationTarget.Workspace:this.workspaceScopeAvailable(!0);break;case o.ConfigurationTarget.WorkspaceFolder:let i;e.workspaceFolder&&e.workspaceFolder.name&&(i=e.workspaceFolder.name),this.configurationTargets.push({value:t,label:i}),this.configTgts.push({value:t,label:i}),this.folderScopeAvailable(!0)}}));let e=new n.configProfileData(this.existingUserProfiles,this.existingWorkspaceProfiles,this.existingFolderProfiles,t.osUser);this.infoSignalFromConfig.dispatch(n.configSignalType.ProfileData,e),this.selectedWorkspaceFolder=this.profileWorkspaceFolder(),this.updateUiFromProfile(this.profileConfigurationTarget(),this.profileWorkspaceFolder(),this.folderScopeAvailable(),this.editable());let i=this.configurationScopes.find((e=>e.configurationTarget===o.ConfigurationTarget.Global));this.tooltip.addTooltip(this.userScopeBtnId,i?.settingsFile);let s=this.configurationScopes.find((e=>e.configurationTarget===o.ConfigurationTarget.Workspace));this.tooltip.addTooltip(this.workspaceScopeBtnId,s?.settingsFile);let r=this.configurationScopes.find((e=>this.profileWorkspaceFolder()&&e.configurationTarget===this.profileConfigurationTarget()&&e.workspaceFolder.name===this.profileWorkspaceFolder().name&&e.workspaceFolder.index===this.profileWorkspaceFolder().index));this.tooltip.addTooltip(this.folderScopeBtnId,r?.settingsFile),this.tooltip.updateTooltip()}}catch(e){i.DataAccessService.instance.logError("Error in configSettings.handleGetAllProfileNamesResponse handler"),i.DataAccessService.instance.logError(e)}i.DataAccessService.instance.logInfo("configSettings.handleGetAllProfileNamesResponse - End")}updateUiFromProfile(e,t,r,n){i.DataAccessService.instance.logInfo("configSettings.updateUiFromProfile - Start");try{let i=this.getConfigValue(e,t);switch(this.configurationTarget(i),e){case o.ConfigurationTarget.Global:this.userScopeBtnStyle(this.settingsButtonStyleSelected),this.workspaceScopeBtnStyle(this.settingsButtonStyleDefault),this.folderScopeBtnStyle(this.settingsButtonStyleDefault),this.editable()||(this.userScopeEnabled(!0),this.workspaceScopeEnabled(!1),this.workspaceFolderScopeEnabled(!1));break;case o.ConfigurationTarget.Workspace:this.userScopeBtnStyle(this.settingsButtonStyleDefault),this.workspaceScopeBtnStyle(this.settingsButtonStyleSelected),this.folderScopeBtnStyle(this.settingsButtonStyleDefault),this.editable()||(this.userScopeEnabled(!1),this.workspaceScopeEnabled(!0),this.workspaceFolderScopeEnabled(!1));break;case o.ConfigurationTarget.WorkspaceFolder:this.userScopeBtnStyle(this.settingsButtonStyleDefault),this.workspaceScopeBtnStyle(this.settingsButtonStyleDefault),this.folderScopeBtnStyle(this.settingsButtonStyleSelected);let e=this.configurationTarget();if(this.configurationScopes){let t=this.configurationScopes.find((t=>this.getConfigValue(t.configurationTarget,t.workspaceFolder)===e));t&&t.workspaceFolder&&this.folderScopeBtnLabel(`${t.workspaceFolder.name} ${s.LocalizedConstants.Instance.folder}`)}this.editable()||(this.userScopeEnabled(!1),this.workspaceScopeEnabled(!1),this.workspaceFolderScopeEnabled(!0))}let r=this.configurationScopes.find((e=>this.profileWorkspaceFolder()&&e.configurationTarget===this.profileConfigurationTarget()&&e.workspaceFolder.name===this.profileWorkspaceFolder().name&&e.workspaceFolder.index===this.profileWorkspaceFolder().index));this.tooltip.addTooltip(this.folderScopeBtnId,r?.settingsFile)}catch(e){i.DataAccessService.instance.logError("Error in configSettings.updateUiFromProfile method"),i.DataAccessService.instance.logError(e)}i.DataAccessService.instance.logInfo("configSettings.updateUiFromProfile - End")}handleInfoSignalToConfig(e,t){i.DataAccessService.instance.logInfo("configSettings.handleInfoSignalToConfig - Start");try{if(e===n.configSignalType.Initilize)this.resetSettingsTarget(),this.getAllProfileNames();else if(e===n.configSignalType.SaveConfirm&&t){let e=t;if(e&&e.promptToSave){const t=new o.MessageBase;t.type=o.MessageName.confirmChangeScopeRequest;const s=new o.ConfirmChangeScopeRequestParams;s.ownerUri=i.DataAccessService.instance.URI,s.executionId=i.DataAccessService.instance.currentExecutionId,s.windowUri=i.DataAccessService.instance.windowUri,s.configurationTarget=e.targetConfigurationTarget,s.workspaceFolder=e.targetWorkspaceFolder,s.scopeChangeSource=this.sourcePrefix,t.data=s,i.DataAccessService.instance.send(t)}else this.updateScopeSelection(e.targetConfigurationTarget,e.targetWorkspaceFolder)}}catch(e){i.DataAccessService.instance.logInfo("configSettings.handleInfoSignalToConfig - Error"),i.DataAccessService.instance.logError(e)}i.DataAccessService.instance.logInfo("configSettings.handleInfoSignalToConfig - End")}handleConfirmChangeScopeResponse(e){i.DataAccessService.instance.logInfo("configSettings.handleConfirmChangeScopeResponse - Start");try{const t=e.data;t&&t.scopeChangeSource===this.sourcePrefix&&t.proceed&&this.updateScopeSelection(t.configurationTarget,t.workspaceFolder)}catch(e){i.DataAccessService.instance.logInfo("configSettings.handleConfirmChangeScopeResponse - Error"),i.DataAccessService.instance.logError(e)}i.DataAccessService.instance.logInfo("configSettings.handleConfirmChangeScopeResponse - End")}updateScopeSelection(e,t){i.DataAccessService.instance.logInfo("configSettings.updateScopeSelection - Start");try{let i;switch(e){case o.ConfigurationTarget.Global:this.userScopeBtnStyle(this.settingsButtonStyleSelected),this.workspaceScopeBtnStyle(this.settingsButtonStyleDefault),this.folderScopeBtnStyle(this.settingsButtonStyleDefault),i=this.getConfigValue(o.ConfigurationTarget.Global,void 0),this.configurationTarget(i),this.profileConfigurationTarget(o.ConfigurationTarget.Global),this.profileWorkspaceFolder(void 0);break;case o.ConfigurationTarget.Workspace:this.userScopeBtnStyle(this.settingsButtonStyleDefault),this.workspaceScopeBtnStyle(this.settingsButtonStyleSelected),this.folderScopeBtnStyle(this.settingsButtonStyleDefault),i=this.getConfigValue(o.ConfigurationTarget.Workspace,void 0),this.configurationTarget(i),this.profileConfigurationTarget(o.ConfigurationTarget.Workspace),this.profileWorkspaceFolder(void 0);break;case o.ConfigurationTarget.WorkspaceFolder:this.userScopeBtnStyle(this.settingsButtonStyleDefault),this.workspaceScopeBtnStyle(this.settingsButtonStyleDefault),this.folderScopeBtnStyle(this.settingsButtonStyleSelected),i=this.getConfigValue(e,t),this.configurationTarget(i),this.profileConfigurationTarget(o.ConfigurationTarget.WorkspaceFolder),this.profileWorkspaceFolder(t),this.folderScopeBtnLabel(`${t.name} ${s.LocalizedConstants.Instance.folder}`),this.selectedWorkspaceFolder=t}}catch(e){i.DataAccessService.instance.logInfo("configSettings.updateScopeSelection - Error"),i.DataAccessService.instance.logError(e)}i.DataAccessService.instance.logInfo("configSettings.updateScopeSelection - End")}}}));