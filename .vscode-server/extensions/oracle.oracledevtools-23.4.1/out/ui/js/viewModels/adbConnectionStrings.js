define(["require","exports","knockout","ojs/ojarraydataprovider","../common/autonomousDBModels","../common/scriptExecutionModels","../common/dataAccessService","../common/localizedConstants","../utilities","../common/messageService","ojs/ojradioset","ojs/ojlabelvalue","ojs/ojlabel","ojs/ojselectcombobox","ojs/ojbutton","ojs/ojtable","ojs/ojknockout","ojs/ojgauge","ojs/ojinputtext","ojs/ojformlayout"],(function(require,e,n,t,i,s,o,a,c,r){"use strict";let l;class h{constructor(){this.copyToClipBoard=a.LocalizedConstants.Instance.connUITextCopyConnectionString,this.authentication=a.LocalizedConstants.Instance.authentication,this.getTLSconnectionStrings=a.LocalizedConstants.Instance.getTLSconnectionStrings,this.tnsNames=a.LocalizedConstants.Instance.tnsNames,this.userName=a.LocalizedConstants.Instance.connUIPlaceHolderUserId,this.password=a.LocalizedConstants.Instance.pswdStr,this.ociOK=a.LocalizedConstants.Instance.OK,this.getConnectonStringErrMsg1=a.LocalizedConstants.Instance.getConnectonStringErrMsg1,this.getConnectonStringErrMsg2=a.LocalizedConstants.Instance.getConnectonStringErrMsg2,this.requiredText="*",this.selectTLSconnectionStrings=a.LocalizedConstants.Instance.selectTLSconnectionStrings,this.connectionString=a.LocalizedConstants.Instance.connectionString,this.mtlsAuthenticationDescription=a.LocalizedConstants.Instance.downloadCredentialFileDescription}}return class{constructor(e){this.tlsAuthenticationTypes=n.observableArray([{value:i.TLSAuthenticationType.MutalTLS,label:a.LocalizedConstants.Instance.mutualTLSConnection},{value:i.TLSAuthenticationType.TLS,label:a.LocalizedConstants.Instance.tlsConnection}]),this.tnsNames=n.observableArray(),this.tnsName=n.observable(),this.connectionString=n.observable(),this.tlsAuthenticationType=n.observable(i.TLSAuthenticationType.None),this.isDedicatedDB=!1,this.showTLSAuthenticationPage=n.observable(),this.connectionProfiles=new Array,this.adbConnectionUILabels=new h,this.handlersField=new Map,this.launchFromConnectionContextMenu=n.observable(),this.headerText=n.observable(),this.errorInFetchConnectionString=n.observable(!1),this.firstLineErrorInFetchConnectionString=n.observable(!1),this.secondLineErrorInFetchConnectionString=n.observable(!1),this.getConnectionStringErrorMesageFirstLine=n.observable(""),this.getConnectionStringErrorMesageSecondLine=n.observable(""),this.showMTLSAuthenticationDescription=n.observable(!1),this.onADBConnectionStringsDataReceived=e=>{var n=e.data;if(this.launchFromConnectionContextMenu()?this.headerText(this.adbConnectionUILabels.selectTLSconnectionStrings):($("#getConnectionStringsID").addClass("connDlgBody"),$("#getConnectionStringsID").css("max-width","700px"),this.headerText(this.adbConnectionUILabels.getTLSconnectionStrings),this.showTLSAuthenticationPage(1==n.isDedicated)),n.errorMessage&&n.errorMessage.length>0){this.errorInFetchConnectionString(!0);let e=n.errorMessage.split("\n");if(e&&e.length>0){for(let n=0;n<e.length;n++)if(e[n].length>0){if(0==n){this.firstLineErrorInFetchConnectionString(!0),this.getConnectionStringErrorMesageFirstLine(e[n]);continue}this.secondLineErrorInFetchConnectionString(!0),this.getConnectionStringErrorMesageSecondLine(this.getConnectionStringErrorMesageSecondLine()+e[n])}}else this.getConnectionStringErrorMesageFirstLine(n.errorMessage)}else this.connectionProfiles=[],this.connectionProfiles=n.connectionProfiles,this.isDedicatedDB=n.isDedicated,n.tlsAuthenticationType&&n.tlsAuthenticationType!=i.TLSAuthenticationType.None&&(this.tlsAuthenticationType(n.tlsAuthenticationType==i.TLSAuthenticationType.MutalTLS?i.TLSAuthenticationType.MutalTLS:i.TLSAuthenticationType.TLS),this.adbAuthenticationType=n.tlsAuthenticationType,this.showMTLSAuthenticationDescription(n.tlsAuthenticationType==i.TLSAuthenticationType.MutalTLS),this.showTLSAuthenticationPage(!0)),this.tnsNames.removeAll(),n.connectionProfiles.forEach((e=>{(n.isDedicated||!n.isDedicated&&e.tlsAuthentication==n.tlsAuthenticationType)&&this.tnsNames.push({value:e.displayName,label:e.displayName})})),this.tnsNames&&this.tnsNames()&&this.tnsNames().length>0&&this.tnsName(this.tnsNames()[0].value),this.connectionString(this.getConnectionString(this.tlsAuthenticationType(),this.tnsName()))},this.initialize=(e=!1)=>{this.launchFromConnectionContextMenu(e),this.getADBConnectionStrings()},this.reInitializeConnectionStringPage=e=>{this.initialize(e)},this.OnAuthenticationChange=(e,n)=>{e&&e.detail&&(this.tnsNames.removeAll(),this.connectionProfiles.forEach((n=>{n.tlsAuthentication==e.detail.value&&this.tnsNames.push({value:n.displayName,label:n.displayName})})),this.connectionString(this.getConnectionString(e.detail.value,this.tnsName())))},this.OnTNSNameChange=(e,n)=>{e&&e.detail&&this.connectionString(this.getConnectionString(this.tlsAuthenticationType(),e.detail.value))},this.onCopyConnectionString=(e,n,t)=>{try{this.connectionString()&&c.copyToClipBoard(this.connectionString())}catch(e){o.DataAccessService.instance.logError(e)}},this.onOk=e=>{this.tlsAuthenticationType()==i.TLSAuthenticationType.MutalTLS?this.launchDownLoadCredentialFilesUIHandler(this.tnsName(),i.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection):this.launchDBConnectionHandler(s.ConnectionType.Advanced,this.connectionString())},this.onClearPageEvent=e=>{try{o.DataAccessService.instance.logInfo("OnclearPageEvent:"+JSON.stringify(e));const n=e.data;this.handleClearEvent(n)}catch(e){o.DataAccessService.instance.logError(e),r.MessagesService.getinstance().ShowMessage(a.LocalizedConstants.Instance.unableToClear)}},this.handleClearEvent=e=>{try{o.DataAccessService.instance.profileName=e.profileName,o.DataAccessService.instance.adbDatabaseID=e.adbDatabaseID,o.DataAccessService.instance.adbWorkLoadType=e.workloadType,this.initialize()}catch(e){o.DataAccessService.instance.logError(e),r.MessagesService.getinstance().ShowMessage(a.LocalizedConstants.Instance.unableToClear)}},this.dataProvider=new t(this.connectionProfiles,{keyAttributes:"displayName"}),l=this,e.reInitializeConnectionStringPage&&e.reInitializeConnectionStringPage(this.reInitializeConnectionStringPage);e&&e.launchFromConnectionContextMenu&&"yes"==e.launchFromConnectionContextMenu&&(this.launchDBConnectionHandler=e.launchDBConnectionHandler,this.launchDownLoadCredentialFilesUIHandler=e.launchDownLoadCredentialFilesUIHandler),this.launchFromConnectionContextMenu(!1),l.handlers=new Map,l.handlers.set(s.MessageName.clearPageEvent,l.onClearPageEvent),l.handlers.set(s.MessageName.ociGetConnectionstringsResponseMessage,l.onADBConnectionStringsDataReceived),o.DataAccessService.instance.subscribe((e=>{if(e&&this.handlers.get(e.type)){const n=this.handlers.get(e.type);n&&n(e)}else o.DataAccessService.instance.logError(`Could not find handler for message ${e.type}`)})),o.DataAccessService.instance.logInfo("Fetching Localized resources "),o.DataAccessService.instance.getLocalizedData().done((e=>{o.DataAccessService.instance.logInfo("Fetched localized resources."),a.LocalizedConstants.Instance.Configure(e)})).fail((e=>{o.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))})),e&&e.launchFromConnectionContextMenu&&"yes"==e.launchFromConnectionContextMenu?(this.launchFromConnectionContextMenu(!0),this.launchDBConnectionHandler=e.launchDBConnectionHandler,this.launchDownLoadCredentialFilesUIHandler=e.launchDownLoadCredentialFilesUIHandler):this.launchFromConnectionContextMenu(!1),l.getADBConnectionStrings()}get handlers(){return this.handlersField}set handlers(e){this.handlersField=e}getConnectionString(e,n){let t="";for(let i=0;i<this.connectionProfiles.length;i++){const s=this.connectionProfiles[i];if(this.isDedicatedDB&&n==s.displayName||!this.isDedicatedDB&&n==s.displayName&&s.tlsAuthentication==e){t=s.connectionString;break}}return t}getADBConnectionStrings(){o.DataAccessService.instance.logInfo("get oci get connectionstring request received.");var e=new s.MessageBase;e.type=s.MessageName.ociGetConnectionstringsRequestMessage;var n=new i.ociADBConnectionStringsRequest;n.executionId=o.DataAccessService.instance.currentExecutionId,n.windowUri=o.DataAccessService.instance.windowUri,n.profileName=o.DataAccessService.instance.profileName,n.adbDatabaseID=o.DataAccessService.instance.adbDatabaseID,n.workloadType=o.DataAccessService.instance.adbWorkLoadType,e.data=n;try{o.DataAccessService.instance.send(e),o.DataAccessService.instance.logInfo("Successfully placed to get connection strings request")}catch(e){o.DataAccessService.instance.logError(e)}}}}));